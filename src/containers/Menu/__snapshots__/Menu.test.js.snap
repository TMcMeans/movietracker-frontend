// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Menu should match snapshot with correct data 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Menu
    addMessage={[MockFunction]}
    allFavorites={Array []}
    logoutUser={[MockFunction]}
    user={
      Object {
        "id": 1,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <p>
        MENU
      </p>,
      "className": "menu",
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "MENU",
      },
      "ref": null,
      "rendered": "MENU",
      "type": "p",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <p>
          MENU
        </p>,
        "className": "menu",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "MENU",
        },
        "ref": null,
        "rendered": "MENU",
        "type": "p",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Menu should match the snapshot when there is a user 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Menu
    addMessage={[MockFunction]}
    allFavorites={Array []}
    logoutUser={[MockFunction]}
    user={
      Object {
        "id": 1,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          onClick={[Function]}
        >
          X
        </button>,
        <p
          className="menu-item"
          id="logout"
          onClick={[Function]}
        >
          Logout
        </p>,
        <p>
          <Link
            className="menu-item"
            onClick={[Function]}
            replace={false}
            to="/favorites"
          >
            Stalked: 
            <span>
              0
            </span>
          </Link>
        </p>,
      ],
      "className": "full-menu",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "X",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "X",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Logout",
          "className": "menu-item",
          "id": "logout",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Logout",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            className="menu-item"
            onClick={[Function]}
            replace={false}
            to="/favorites"
          >
            Stalked: 
            <span>
              0
            </span>
          </Link>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "Stalked: ",
              <span>
                0
              </span>,
            ],
            "className": "menu-item",
            "onClick": [Function],
            "replace": false,
            "to": "/favorites",
          },
          "ref": null,
          "rendered": Array [
            "Stalked: ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": 0,
              },
              "ref": null,
              "rendered": 0,
              "type": "span",
            },
          ],
          "type": [Function],
        },
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            onClick={[Function]}
          >
            X
          </button>,
          <p
            className="menu-item"
            id="logout"
            onClick={[Function]}
          >
            Logout
          </p>,
          <p>
            <Link
              className="menu-item"
              onClick={[Function]}
              replace={false}
              to="/favorites"
            >
              Stalked: 
              <span>
                0
              </span>
            </Link>
          </p>,
        ],
        "className": "full-menu",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "X",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "X",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Logout",
            "className": "menu-item",
            "id": "logout",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Logout",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              className="menu-item"
              onClick={[Function]}
              replace={false}
              to="/favorites"
            >
              Stalked: 
              <span>
                0
              </span>
            </Link>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                "Stalked: ",
                <span>
                  0
                </span>,
              ],
              "className": "menu-item",
              "onClick": [Function],
              "replace": false,
              "to": "/favorites",
            },
            "ref": null,
            "rendered": Array [
              "Stalked: ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": 0,
                },
                "ref": null,
                "rendered": 0,
                "type": "span",
              },
            ],
            "type": [Function],
          },
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
